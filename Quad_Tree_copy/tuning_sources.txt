https://www.iue.tuwien.ac.at/phd/halama/node112.html

https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/quadtrees.pdf - διαφάνεια 41

https://courses.cs.vt.edu/~cs3114/Summer15/Notes/T04_PRQuadTrees.pdf - διαφάνεια 14

https://personal.us.es/almar/cg/09quadtrees.pdf - διαφάνεια 20

Για ένα quad tree με capacity=1, 
σε μια ιδανική περίπτωση όπου το δέντρο έβγαινε απολύτως ζυγισμένο,
τότε θα είχε ύψος log4(n). 
Αυτός θα ήταν και ο χρόνος αναζήτησης ενός σημείου.

Στην δική μας περίπτωση το quad tree έχει capacity=d 
και για μήκος πλευράς του περιβάλλοντος τετραγώνου s
και ελάχιστη απόσταση c μεταξύ οποιονδήποτε δύο σημείων του συνόλου, 
το δέντρο έχει ύψος το πολύ log2(sqrt(2)*s/c).

Ανάμεσα στα d φύλλα του κλαδιού γίνεται γραμμική αναζήτηση,
η οποία παίρνει χρόνο d.

Συνολικά, ο χρόνος για να βρούμε το κλαδί και στη συνέχεια το φύλλο
είναι το άθροισμα log2(sqrt(2)*s/c) + d
και θέλουμε αυτός ο χρόνος να είναι ίσος με τον χρόνο της ιδανικής περίπτωσης.

Αν ο όρος log2(sqrt(2)*s/c) υπολογιζόταν ακριβώς πριν την κατασκευή του δέντρου,
τότε ο υπολογισμός του c θα απαιτούσε χρόνο (n*(n-1))/2
το οποίο μας δίνει την καλύτερη εκτίμηση για το ύψος,
αλλά προσθέτει υπερβολική καθυστέρηση.

Αν θεωρήσουμε τον όρο log2(sqrt(2)*s/c) = e ως μία σταθερά,
μόνο και μόνο επειδή δεν εξαρτάται από το d ή το n,
τότε η εξίσωση που θέλουμε να λύσουμε γίνεται e + d = log4(n) => d = log4(n) - e. 

Βλέπουμε ξεκάθαρα την σχέση του d με το n, αλλά η σταθερά e μπορεί να μειώσει σημαντικά το d.
Παρόλο που δεν γίνεται να ξέρουμε την τιμή του e εκ των προτέρων,
θα μπορούσε να γίνει μια πρόχειρη εκτίμηση.

Θεωρώντας ότι τα n σημεία χωράνε ομοιόμορφα σε ένα τετράγωνο με πλευρά s,
τότε σε κάθε σημείο αντιστοιχεί χώρος της τάξης s^2/n.
Κάθε μικρότερο τετράγωνο θα έχει πλευρά sqrt(s^2/n) και αυτή είναι ταυτόχρονα
η τάξη της ελάχιστης απόστασης μεταξύ δύο γειτονικών σημείων.
Δηλαδή c = sqrt(s^2/n).

Συνεπώς, e = log2(sqrt(2)*s/c) 
=> e = log2( (sqrt(2)*s) / (sqrt(s^2/n)) )
=> e = log2( (sqrt(2)*s) / (sqrt(s^2)/sqrt(n)) )
=> e = log2( ( sqrt(2) * s * sqrt(n) ) / sqrt(s^2) )
=> e = log2( ( sqrt(2) * s * sqrt(n) ) / s )
=> e = log2( sqrt(2) * sqrt(n) )
=> e = log2( sqrt(2*n) )

Άρα τώρα η εξίσωση γίνεται d = log4(n) - log2( sqrt(2*n) ),
η οποία έχει σταθερή τιμή -0.5 ατυχώς.
Αν η ελάχιστη απόσταση c είναι στην πραγματικότητα μικρότερη,
τότε το e γίνεται μεγαλύτερο και το d γίνεται μικρότερο από -0,5.
Αν το πραγματικό ύψος είναι πολύ μικρότερο της εκτίμησης e,
τότε ο όρος e μειώνεται και το d τίνει να γίνει ίσο με log4(n).

Παρακολουθώντας τις τιμές του d = log4(n)
n=10^1  d=1.66  -> 2
n=10^2  d=3.32  -> 3
n=10^3  d=4.98  -> 5
n=10^4  d=6.64  -> 7
n=10^5  d=8.30  -> 8
n=10^6  d=9.96  -> 10
n=10^7  d=11.62 -> 12
n=10^8  d=13.28 -> 13
n=10^9  d=14.94 -> 15
παρατηρούμε ότι οι τιμές αυξάνονται με ικανοποιητικά αργό ρυθμό.
Συνεπώς το να μειώναμε κι άλλο αυτές τις τιμές μέσω του e θα ήταν μάλλον άσκοπο, 
εφόσον και η παραπάνω μαθηματική προσέγγιση δεν οδήγησε σε κάποιο χρήσιμο αποτέλεσμα.
